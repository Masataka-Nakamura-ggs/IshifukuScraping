<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="3" skipped="1" tests="229" time="37.805" timestamp="2025-08-22T02:22:09.716637+00:00" hostname="pkrvmqc4gcfdwos"><testcase classname="" name="tests.test_s3_storage" time="0.000"><skipped message="collection skipped">('/home/runner/work/IshifukuScraping/IshifukuScraping/tests/test_s3_storage.py', 135, 'Skipped: boto3 not available')</skipped></testcase><testcase classname="tests.test_config.TestScrapingConfig" name="test_default_values" time="0.001" /><testcase classname="tests.test_config.TestScrapingConfig" name="test_link_patterns_initialization" time="0.001" /><testcase classname="tests.test_config.TestWebDriverConfig" name="test_default_values" time="0.001" /><testcase classname="tests.test_config.TestWebDriverConfig" name="test_chrome_arguments_initialization" time="0.001" /><testcase classname="tests.test_config.TestWebDriverConfig" name="test_headless_false" time="0.001" /><testcase classname="tests.test_config.TestStorageConfig" name="test_default_values" time="0.001" /><testcase classname="tests.test_config.TestStorageConfig" name="test_get_csv_filename" time="0.001" /><testcase classname="tests.test_config.TestStorageConfig" name="test_get_log_filename" time="0.001" /><testcase classname="tests.test_config.TestApplicationConfig" name="test_default_values" time="0.001" /><testcase classname="tests.test_config.TestApplicationConfig" name="test_lambda_environment" time="0.001" /><testcase classname="tests.test_config.TestConfigFactory" name="test_get_config_local" time="0.001" /><testcase classname="tests.test_config.TestConfigFactory" name="test_get_config_lambda" time="0.001" /><testcase classname="tests.test_config.TestConfigFactory" name="test_get_config_default" time="0.001" /><testcase classname="tests.test_core.TestGoldPriceScraper" name="test_initialization" time="0.002" /><testcase classname="tests.test_core.TestGoldPriceScraper" name="test_initialization_with_defaults" time="0.002" /><testcase classname="tests.test_core.TestGoldPriceScraper" name="test_scrape_gold_price_success" time="3.006" /><testcase classname="tests.test_core.TestGoldPriceScraper" name="test_scrape_gold_price_failure" time="0.003" /><testcase classname="tests.test_core.TestGoldPriceScraper" name="test_scrape_and_save_success" time="0.002" /><testcase classname="tests.test_core.TestGoldPriceScraper" name="test_scrape_and_save_failure" time="0.004" /><testcase classname="tests.test_core.TestGoldPriceScraper" name="test_find_price_page_url_with_link" time="0.002" /><testcase classname="tests.test_core.TestGoldPriceScraper" name="test_find_price_page_url_fallback" time="0.002" /><testcase classname="tests.test_core.TestGoldPriceScraper" name="test_close" time="0.002" /><testcase classname="tests.test_core.TestGoldPriceScraper" name="test_context_manager" time="0.002" /><testcase classname="tests.test_core.TestGoldPriceScraperIntegration" name="test_real_csv_storage" time="3.004" /><testcase classname="tests.test_core.TestFactory" name="test_create_gold_price_scraper_default" time="0.001" /><testcase classname="tests.test_core.TestFactory" name="test_create_gold_price_scraper_lambda" time="0.001" /><testcase classname="tests.test_core.TestFactory" name="test_create_gold_price_scraper_with_config" time="0.001" /><testcase classname="tests.test_core.TestBackwardCompatibility" name="test_scrape_gold_price_function" time="0.002" /><testcase classname="tests.test_csv_handler.TestCSVStorage" name="test_csv_storage_initialization" time="0.001" /><testcase classname="tests.test_csv_handler.TestCSVStorage" name="test_csv_storage_with_temp_directory" time="0.001" /><testcase classname="tests.test_csv_handler.TestCSVStorage" name="test_csv_storage_save_method_exists" time="0.001" /><testcase classname="tests.test_csv_handler.TestDataStorageInterface" name="test_data_storage_abstract_class_import" time="0.001" /><testcase classname="tests.test_datetime_utils.TestDateTimeUtils" name="test_get_current_datetime_returns_tuple" time="0.001" /><testcase classname="tests.test_datetime_utils.TestDateTimeUtils" name="test_get_current_datetime_format_validation" time="0.001" /><testcase classname="tests.test_datetime_utils.TestDateTimeUtils" name="test_get_current_date_string_format" time="0.001" /><testcase classname="tests.test_datetime_utils.TestDateTimeUtils" name="test_get_current_datetime_consistency" time="0.001" /><testcase classname="tests.test_driver.TestWebDriverConfig" name="test_custom_chrome_arguments" time="0.001" /><testcase classname="tests.test_driver.TestChromeDriverFactory" name="test_initialization" time="0.001" /><testcase classname="tests.test_driver.TestChromeDriverFactory" name="test_initialization_default_config" time="0.001" /><testcase classname="tests.test_driver.TestChromeDriverFactory" name="test_create_driver_success" time="0.003" /><testcase classname="tests.test_driver.TestChromeDriverFactory" name="test_create_driver_failure" time="0.003" /><testcase classname="tests.test_driver.TestChromeDriverFactory" name="test_create_chrome_options" time="0.001" /><testcase classname="tests.test_driver.TestLambdaChromeDriverFactory" name="test_create_driver_success" time="0.002" /><testcase classname="tests.test_driver.TestLambdaChromeDriverFactory" name="test_create_driver_failure" time="0.001" /><testcase classname="tests.test_driver.TestLambdaChromeDriverFactory" name="test_create_lambda_chrome_options" time="0.001" /><testcase classname="tests.test_driver.TestWebDriverManager" name="test_initialization" time="0.001" /><testcase classname="tests.test_driver.TestWebDriverManager" name="test_get_driver_creates_new" time="0.002" /><testcase classname="tests.test_driver.TestWebDriverManager" name="test_get_driver_reuses_existing" time="0.002" /><testcase classname="tests.test_driver.TestWebDriverManager" name="test_navigate_to" time="0.003" /><testcase classname="tests.test_driver.TestWebDriverManager" name="test_get_page_source" time="0.002" /><testcase classname="tests.test_driver.TestWebDriverManager" name="test_wait_for_element" time="0.002" /><testcase classname="tests.test_driver.TestWebDriverManager" name="test_find_element_by_xpath_success" time="0.002" /><testcase classname="tests.test_driver.TestWebDriverManager" name="test_find_element_by_xpath_no_element" time="0.002" /><testcase classname="tests.test_driver.TestWebDriverManager" name="test_find_element_by_xpath_exception" time="0.002" /><testcase classname="tests.test_driver.TestWebDriverManager" name="test_close" time="0.002" /><testcase classname="tests.test_driver.TestWebDriverManager" name="test_close_no_driver" time="0.001" /><testcase classname="tests.test_driver.TestWebDriverManager" name="test_context_manager" time="0.002" /><testcase classname="tests.test_driver.TestWebDriverFactoryFunctions" name="test_create_webdriver_factory_local" time="0.001" /><testcase classname="tests.test_driver.TestWebDriverFactoryFunctions" name="test_create_webdriver_factory_lambda" time="0.001" /><testcase classname="tests.test_driver.TestWebDriverFactoryFunctions" name="test_create_webdriver_factory_with_config" time="0.001" /><testcase classname="tests.test_driver.TestWebDriverFactoryFunctions" name="test_create_webdriver_manager_local" time="0.001" /><testcase classname="tests.test_driver.TestWebDriverFactoryFunctions" name="test_create_webdriver_manager_lambda" time="0.001" /><testcase classname="tests.test_driver.TestWebDriverFactoryFunctions" name="test_create_webdriver_manager_with_config" time="0.001" /><testcase classname="tests.test_extractor.TestGoldPriceExtractor" name="test_extract_price_from_table" time="0.002" /><testcase classname="tests.test_extractor.TestGoldPriceExtractor" name="test_extract_price_from_table_third_column" time="0.002" /><testcase classname="tests.test_extractor.TestGoldPriceExtractor" name="test_extract_price_with_parentheses" time="0.002" /><testcase classname="tests.test_extractor.TestGoldPriceExtractor" name="test_extract_price_from_text_patterns" time="0.001" /><testcase classname="tests.test_extractor.TestGoldPriceExtractor" name="test_extract_price_not_found" time="0.002" /><testcase classname="tests.test_extractor.TestGoldPriceExtractor" name="test_extract_price_invalid_range" time="0.001" /><testcase classname="tests.test_extractor.TestGoldPriceExtractor" name="test_is_gold_row" time="0.001" /><testcase classname="tests.test_extractor.TestGoldPriceExtractor" name="test_is_valid_price" time="0.001" /><testcase classname="tests.test_extractor.TestExtractPriceFromText" name="test_extract_simple_number" time="0.001" /><testcase classname="tests.test_extractor.TestExtractPriceFromText" name="test_extract_comma_separated" time="0.001" /><testcase classname="tests.test_extractor.TestExtractPriceFromText" name="test_extract_with_parentheses" time="0.001" /><testcase classname="tests.test_extractor.TestExtractPriceFromText" name="test_extract_none_input" time="0.001" /><testcase classname="tests.test_extractor.TestExtractPriceFromText" name="test_extract_empty_string" time="0.001" /><testcase classname="tests.test_extractor.TestExtractPriceFromText" name="test_extract_no_numbers" time="0.001" /><testcase classname="tests.test_extractor.TestExtractPriceFromText" name="test_extract_invalid_format" time="0.001" /><testcase classname="tests.test_extractor.TestPriceExtractorFactory" name="test_create_price_extractor_default" time="0.001" /><testcase classname="tests.test_extractor.TestPriceExtractorFactory" name="test_create_price_extractor_with_config" time="0.001" /><testcase classname="tests.test_extractor_advanced.TestGoldPriceExtractorAdvanced" name="test_extract_from_table_complex_structure" time="0.002" /><testcase classname="tests.test_extractor_advanced.TestGoldPriceExtractorAdvanced" name="test_extract_from_multiple_tables" time="0.002" /><testcase classname="tests.test_extractor_advanced.TestGoldPriceExtractorAdvanced" name="test_extract_from_table_with_insufficient_columns" time="0.002" /><testcase classname="tests.test_extractor_advanced.TestGoldPriceExtractorAdvanced" name="test_extract_with_gold_row_edge_cases" time="0.002" /><testcase classname="tests.test_extractor_advanced.TestGoldPriceExtractorAdvanced" name="test_extract_price_from_text_patterns_multiple_patterns" time="0.002" /><testcase classname="tests.test_extractor_advanced.TestGoldPriceExtractorAdvanced" name="test_extract_price_from_text_patterns_no_valid_matches" time="0.002" /><testcase classname="tests.test_extractor_advanced.TestGoldPriceExtractorAdvanced" name="test_extract_price_from_text_with_different_number_patterns" time="0.002" /><testcase classname="tests.test_extractor_advanced.TestGoldPriceExtractorAdvanced" name="test_is_gold_row_detailed" time="0.001" /><testcase classname="tests.test_extractor_advanced.TestGoldPriceExtractorAdvanced" name="test_extract_price_from_text_edge_cases" time="0.001" /><testcase classname="tests.test_extractor_advanced.TestGoldPriceExtractorAdvanced" name="test_extract_price_from_text_regex_patterns" time="0.001" /><testcase classname="tests.test_extractor_advanced.TestGoldPriceExtractorAdvanced" name="test_extract_from_table_exception_handling" time="0.002" /><testcase classname="tests.test_extractor_advanced.TestGoldPriceExtractorAdvanced" name="test_custom_config_with_different_price_ranges" time="0.002" /><testcase classname="tests.test_extractor_advanced.TestPriceExtractorAbstractBase" name="test_price_extractor_is_abstract" time="0.001" /><testcase classname="tests.test_extractor_advanced.TestEdgeCasesAndErrorHandling" name="test_extract_price_with_empty_html" time="0.001" /><testcase classname="tests.test_extractor_advanced.TestEdgeCasesAndErrorHandling" name="test_extract_price_with_malformed_html" time="0.002" /><testcase classname="tests.test_extractor_advanced.TestEdgeCasesAndErrorHandling" name="test_performance_with_large_html" time="5.450" /><testcase classname="tests.test_extractor_advanced.TestAdditionalFactoryAndUtilityFunctions" name="test_extract_price_from_text_function_comprehensive" time="0.001" /><testcase classname="tests.test_extractor_advanced.TestAdditionalFactoryAndUtilityFunctions" name="test_create_price_extractor_returns_correct_interface" time="0.001" /><testcase classname="tests.test_extractor_coverage.TestCoverageCompletion" name="test_abstract_price_extractor" time="0.001" /><testcase classname="tests.test_extractor_coverage.TestCoverageCompletion" name="test_extract_price_from_text_value_error_cases" time="0.001" /><testcase classname="tests.test_extractor_coverage.TestCoverageCompletion" name="test_extract_price_from_text_sequential_digits_value_error" time="0.001" /><testcase classname="tests.test_extractor_coverage.TestCoverageCompletion" name="test_edge_case_for_remaining_coverage" time="0.001" /><testcase classname="tests.test_extractor_coverage.TestCoverageCompletion" name="test_comprehensive_price_extraction_patterns" time="0.001" /><testcase classname="tests.test_extractor_coverage.TestCoverageCompletion" name="test_regex_pattern_matching_details" time="0.001" /><testcase classname="tests.test_extractor_coverage.TestCoverageCompletion" name="test_internal_method_direct_coverage" time="0.001" /><testcase classname="tests.test_extractor_coverage.TestCoverageCompletion" name="test_complete_extraction_workflow" time="0.002" /><testcase classname="tests.test_extractor_final.TestFinalCoverage" name="test_price_extractor_abstract_method" time="0.001" /><testcase classname="tests.test_extractor_final.TestFinalCoverage" name="test_value_error_in_comma_separated_conversion" time="0.001" /><testcase classname="tests.test_extractor_final.TestFinalCoverage" name="test_value_error_in_sequential_digits_conversion" time="0.001" /><testcase classname="tests.test_extractor_final.TestFinalCoverage" name="test_complete_error_handling_paths" time="0.002" /><testcase classname="tests.test_extractor_final.TestFinalCoverage" name="test_specific_line_coverage" time="0.002" /><testcase classname="tests.test_extractor_final.TestFinalCoverage" name="test_edge_cases_for_complete_coverage" time="0.001" /><testcase classname="tests.test_extractor_final.TestFinalCoverage" name="test_coverage_verification" time="0.001" /><testcase classname="tests.test_main_lambda.TestMainLambda" name="test_lambda_handler_success" time="0.012" /><testcase classname="tests.test_main_lambda.TestMainLambda" name="test_lambda_handler_scraping_failure" time="0.003" /><testcase classname="tests.test_main_lambda.TestMainLambda" name="test_lambda_handler_s3_unavailable" time="0.003" /><testcase classname="tests.test_main_lambda.TestMainLambda" name="test_main_function_execution" time="0.001" /><testcase classname="tests.test_main_local.TestMainLocal" name="test_main_execution_success" time="0.004" /><testcase classname="tests.test_main_local.TestMainLocal" name="test_main_execution_failure" time="0.002" /><testcase classname="tests.test_main_local.TestMainLocal" name="test_module_imports" time="0.001" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_initialization" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_initialization_with_custom_options" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_context_manager" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_get_cached_price_no_file" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_get_cached_price_valid_cache" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_get_cached_price_expired_cache" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_get_cached_price_invalid_json" time="0.003" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_cache_last_result" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_cache_last_result_write_error" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_save_cached_result_success" time="0.005" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_save_cached_result_no_price" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_save_cached_result_save_error" time="0.003" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_clear_cache" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_clear_cache_no_file" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_clear_cache_permission_error" time="0.003" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_get_cache_info_no_file" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_get_cache_info_valid_cache" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_get_cache_info_expired_cache" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_get_cache_info_read_error" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_scrape_and_save_without_cache" time="0.002" /><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_scrape_and_save_with_valid_cache" time="0.004"><failure message="ValueError: not enough values to unpack (expected 2, got 0)">self = &lt;tests.test_optimized_core.TestOptimizedGoldPriceScraper object at 0x7f65abe70b90&gt;
mock_super_scrape = &lt;MagicMock name='scrape_and_save' id='140074647370256'&gt;

    @patch("src.ishifuku.optimized_core.BaseGoldPriceScraper.scrape_and_save")
    def test_scrape_and_save_with_valid_cache(self, mock_super_scrape):
        """有効なキャッシュが存在する場合のテスト"""
        # 有効なキャッシュを作成
        cache_data = {"timestamp": time.time(), "data": {"gold_price": 8300}}
    
        os.makedirs(os.path.dirname(self.cache_file), exist_ok=True)
        with open(self.cache_file, "w", encoding="utf-8") as f:
            json.dump(cache_data, f)
    
        with patch(
            "src.ishifuku.utils.datetime_utils.get_current_date_string",
            return_value="2025-08-22",
        ):
            with patch(
                "src.ishifuku.utils.datetime_utils.get_current_datetime",
                return_value="2025-08-22 10:00:00",
            ):
                with patch(
                    "src.ishifuku.utils.datetime_utils.get_filename_date_string",
                    return_value="20250822",
                ):
                    with patch("src.ishifuku.optimized_core.log_info") as mock_log:
&gt;                       success, error = self.scraper.scrape_and_save()
                        ^^^^^^^^^^^^^^
E                       ValueError: not enough values to unpack (expected 2, got 0)

tests/test_optimized_core.py:335: ValueError</failure></testcase><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_scrape_and_save_cache_and_save_success" time="0.003"><failure message="AssertionError: assert False&#10; +  where False = &lt;function exists at 0x7f65ae982980&gt;('/tmp/tmpkh3_rgrt/test_cache.json')&#10; +    where &lt;function exists at 0x7f65ae982980&gt; = &lt;module 'posixpath' (frozen)&gt;.exists&#10; +      where &lt;module 'posixpath' (frozen)&gt; = os.path&#10; +    and   '/tmp/tmpkh3_rgrt/test_cache.json' = &lt;tests.test_optimized_core.TestOptimizedGoldPriceScraper object at 0x7f65abd06650&gt;.cache_file">self = &lt;tests.test_optimized_core.TestOptimizedGoldPriceScraper object at 0x7f65abd06650&gt;
mock_super_scrape = &lt;MagicMock name='scrape_and_save' id='140074645835456'&gt;

    @patch("src.ishifuku.optimized_core.BaseGoldPriceScraper.scrape_and_save")
    def test_scrape_and_save_cache_and_save_success(self, mock_super_scrape):
        """スクレイピング成功後のキャッシュ保存テスト"""
        mock_super_scrape.return_value = (True, None)
        self.scraper._last_gold_price = 8400
    
        success, error = self.scraper.scrape_and_save()
    
        assert success is True
        assert error is None
        mock_super_scrape.assert_called_once()
        # キャッシュファイルが作成されていることを確認
&gt;       assert os.path.exists(self.cache_file)
E       AssertionError: assert False
E        +  where False = &lt;function exists at 0x7f65ae982980&gt;('/tmp/tmpkh3_rgrt/test_cache.json')
E        +    where &lt;function exists at 0x7f65ae982980&gt; = &lt;module 'posixpath' (frozen)&gt;.exists
E        +      where &lt;module 'posixpath' (frozen)&gt; = os.path
E        +    and   '/tmp/tmpkh3_rgrt/test_cache.json' = &lt;tests.test_optimized_core.TestOptimizedGoldPriceScraper object at 0x7f65abd06650&gt;.cache_file

tests/test_optimized_core.py:354: AssertionError</failure></testcase><testcase classname="tests.test_optimized_core.TestOptimizedGoldPriceScraper" name="test_performance_cache_vs_no_cache" time="0.003"><failure message="TypeError: GoldPriceScraper.scrape_and_save() got an unexpected keyword argument 'use_cache'">self = &lt;tests.test_optimized_core.TestOptimizedGoldPriceScraper object at 0x7f65abd05a50&gt;

    def test_performance_cache_vs_no_cache(self):
        """キャッシュ有無でのパフォーマンス比較テスト"""
        # キャッシュデータを準備
        cache_data = {"timestamp": time.time(), "data": {"gold_price": 8500}}
    
        os.makedirs(os.path.dirname(self.cache_file), exist_ok=True)
        with open(self.cache_file, "w", encoding="utf-8") as f:
            json.dump(cache_data, f)
    
        # キャッシュありの実行時間測定
        with patch(
            "src.ishifuku.utils.datetime_utils.get_current_date_string",
            return_value="2025-08-22",
        ):
            with patch(
                "src.ishifuku.utils.datetime_utils.get_current_datetime",
                return_value="2025-08-22 10:00:00",
            ):
                with patch(
                    "src.ishifuku.utils.datetime_utils.get_filename_date_string",
                    return_value="20250822",
                ):
                    start_time = time.time()
&gt;                   self.scraper.scrape_and_save(use_cache=True)
E                   TypeError: GoldPriceScraper.scrape_and_save() got an unexpected keyword argument 'use_cache'

tests/test_optimized_core.py:379: TypeError</failure></testcase><testcase classname="tests.test_optimized_core.TestCreateOptimizedScraper" name="test_create_optimized_scraper_default" time="0.003" /><testcase classname="tests.test_optimized_core.TestCreateOptimizedScraper" name="test_create_optimized_scraper_lambda" time="0.003" /><testcase classname="tests.test_optimized_core.TestPerformance" name="test_cache_write_performance" time="0.005" /><testcase classname="tests.test_optimized_core.TestPerformance" name="test_cache_read_performance" time="0.004" /><testcase classname="tests.test_optimized_core.TestPerformance" name="test_memory_usage" time="0.140" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_initialization" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_initialization_with_config" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_parse_basic_html" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_find_price_link_patterns_with_text_content" time="0.002" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_find_price_link_patterns_with_href_content" time="0.002" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_find_price_link_patterns_multiple_matches" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_find_price_link_patterns_no_match" time="0.002" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_extract_text_from_pattern" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_extract_text_from_pattern_single_quote" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_extract_text_from_pattern_no_match" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_extract_href_from_pattern" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_extract_href_from_pattern_single_quote" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_extract_href_from_pattern_no_match" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_extract_table_data_simple" time="0.002" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_extract_table_data_multiple_tables" time="0.002" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_extract_table_data_empty_rows" time="0.002" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_extract_table_data_no_tables" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_get_page_title" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_get_page_title_no_title" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_get_debug_info" time="0.004" /><testcase classname="tests.test_parser.TestHTMLParser" name="test_find_link_by_pattern_exception_handling" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParserFactory" name="test_create_html_parser_default" time="0.001" /><testcase classname="tests.test_parser.TestHTMLParserFactory" name="test_create_html_parser_with_config" time="0.001" /><testcase classname="tests.test_scrape_ishifuku.TestGetCurrentDatetime" name="test_get_current_datetime_format" time="0.001" /><testcase classname="tests.test_scrape_ishifuku.TestGetCurrentDatetime" name="test_get_current_datetime_mock" time="0.002" /><testcase classname="tests.test_scrape_ishifuku.TestExtractPriceFromText" name="test_extract_price_basic" time="0.001" /><testcase classname="tests.test_scrape_ishifuku.TestExtractPriceFromText" name="test_extract_price_with_parentheses" time="0.001" /><testcase classname="tests.test_scrape_ishifuku.TestExtractPriceFromText" name="test_extract_price_with_spaces" time="0.001" /><testcase classname="tests.test_scrape_ishifuku.TestExtractPriceFromText" name="test_extract_price_invalid_input" time="0.001" /><testcase classname="tests.test_scrape_ishifuku.TestExtractPriceFromText" name="test_extract_price_edge_cases" time="0.001" /><testcase classname="tests.test_scrape_ishifuku.TestCreateEmptyCSV" name="test_create_empty_csv_success" time="0.002" /><testcase classname="tests.test_scrape_ishifuku.TestCreateEmptyCSV" name="test_create_empty_csv_error" time="0.002" /><testcase classname="tests.test_scrape_ishifuku.TestSaveToCSV" name="test_save_to_csv_success" time="0.001" /><testcase classname="tests.test_scrape_ishifuku.TestSaveToCSV" name="test_save_to_csv_error" time="0.001" /><testcase classname="tests.test_scrape_ishifuku.TestSetupLogging" name="test_setup_logging" time="0.002" /><testcase classname="tests.test_scrape_ishifuku.TestIntegration" name="test_workflow_success" time="0.003" /><testcase classname="tests.test_scraping_functions.TestScrapeGoldPrice" name="test_scrape_gold_price_success" time="8.010" /><testcase classname="tests.test_scraping_functions.TestScrapeGoldPrice" name="test_scrape_gold_price_network_error" time="0.004" /><testcase classname="tests.test_scraping_functions.TestScrapeGoldPrice" name="test_scrape_gold_price_no_data_found" time="8.009" /><testcase classname="tests.test_scraping_functions.TestScrapeGoldPrice" name="test_scrape_gold_price_fallback_search" time="8.008" /><testcase classname="tests.test_scraping_functions.TestSeleniumIntegration" name="test_main_function_success" time="0.003" /><testcase classname="tests.test_scraping_functions.TestSeleniumIntegration" name="test_main_function_error" time="0.003" /><testcase classname="tests.test_storage.TestCSVStorage" name="test_initialization_default" time="0.001" /><testcase classname="tests.test_storage.TestCSVStorage" name="test_initialization_with_config" time="0.001" /><testcase classname="tests.test_storage.TestCSVStorage" name="test_save_success" time="0.001" /><testcase classname="tests.test_storage.TestCSVStorage" name="test_save_creates_directory" time="0.001" /><testcase classname="tests.test_storage.TestCSVStorage" name="test_save_failure" time="0.002" /><testcase classname="tests.test_storage.TestCSVStorage" name="test_create_empty_file_success" time="0.001" /><testcase classname="tests.test_storage.TestCSVStorage" name="test_create_empty_file_failure" time="0.001" /><testcase classname="tests.test_storage.TestCSVStorage" name="test_save_batch" time="0.001" /><testcase classname="tests.test_storage.TestCSVStorage" name="test_read_success" time="0.001" /><testcase classname="tests.test_storage.TestCSVStorage" name="test_read_failure" time="0.001" /><testcase classname="tests.test_storage.TestLegacyCSVHandler" name="test_initialization" time="0.001" /><testcase classname="tests.test_storage.TestLegacyCSVHandler" name="test_save_to_csv" time="0.001" /><testcase classname="tests.test_storage.TestLegacyCSVHandler" name="test_create_empty_csv" time="0.001" /><testcase classname="tests.test_storage.TestCSVStorageFactory" name="test_create_csv_storage_default" time="0.001" /><testcase classname="tests.test_storage.TestCSVStorageFactory" name="test_create_csv_storage_with_config" time="0.001" /><testcase classname="tests.test_storage.TestCSVStorageFactory" name="test_create_legacy_csv_handler_default" time="0.001" /><testcase classname="tests.test_storage.TestCSVStorageFactory" name="test_create_legacy_csv_handler_with_config" time="0.001" /><testcase classname="tests.test_storage.TestBackwardCompatibilityFunctions" name="test_save_to_csv_function" time="0.002" /><testcase classname="tests.test_storage.TestBackwardCompatibilityFunctions" name="test_create_empty_csv_function" time="0.002" /><testcase classname="tests.test_storage.TestS3StorageImports" name="test_s3_storage_imports" time="0.001" /><testcase classname="tests.test_storage.TestStorageInit" name="test_import_all_storage_functions" time="0.001" /><testcase classname="tests.test_utils.TestDateTimeUtils" name="test_get_current_datetime" time="0.001" /><testcase classname="tests.test_utils.TestDateTimeUtils" name="test_get_current_date_string" time="0.001" /><testcase classname="tests.test_utils.TestDateTimeUtils" name="test_get_current_datetime_string" time="0.001" /><testcase classname="tests.test_utils.TestDateTimeUtils" name="test_get_filename_date_string" time="0.001" /><testcase classname="tests.test_utils.TestDateTimeUtils" name="test_format_datetime_for_filename" time="0.001" /><testcase classname="tests.test_utils.TestDateTimeUtils" name="test_format_datetime_for_display" time="0.001" /><testcase classname="tests.test_utils.TestDateTimeUtils" name="test_parse_date_string_valid" time="0.064" /><testcase classname="tests.test_utils.TestDateTimeUtils" name="test_parse_date_string_invalid" time="0.001" /><testcase classname="tests.test_utils.TestDateTimeUtils" name="test_parse_date_string_invalid_date" time="0.001" /><testcase classname="tests.test_utils.TestDateTimeUtils" name="test_is_valid_date_format_valid" time="0.001" /><testcase classname="tests.test_utils.TestDateTimeUtils" name="test_is_valid_date_format_invalid" time="0.001" /><testcase classname="tests.test_utils.TestLoggingUtils" name="test_setup_logging_imports" time="0.001" /><testcase classname="tests.test_utils.TestLoggingUtils" name="test_setup_logging_basic" time="0.001" /><testcase classname="tests.test_utils.TestLoggingUtils" name="test_setup_lambda_logging" time="0.001" /><testcase classname="tests.test_utils.TestLoggingUtils" name="test_get_logger" time="0.001" /><testcase classname="tests.test_utils.TestLoggingUtils" name="test_log_functions" time="0.002" /><testcase classname="tests.test_utils.TestUtilsInit" name="test_import_all_functions" time="0.001" /></testsuite></testsuites>